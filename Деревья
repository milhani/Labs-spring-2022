#include <algorithm>
#include <iostream>

using namespace std;


struct Time {
    string hour, minute, second;
    int total;
};


struct Flight {
    string point_of_departure, point_of_arrival;
    Time departure_time, arrival_time;
    int wagons, passengers;
};



struct Node {
    Flight key;
    Node* l;
    Node* r;
    explicit Node(Flight& new_key) {
        key = new_key;
        l = r = nullptr;
    }
};


struct Tree {
    Node* root;
    Tree() : root(nullptr) { }

    void insert(Flight& fl) {
        insert(root, fl);
    }

    void insert(Node*& tree, Flight& fl) {
        if (tree == nullptr) {
            tree = new Node(fl);
            return;
        }
        if (tree->key.departure_time.total == fl.departure_time.total) {
            if (fl.arrival_time.total < tree->key.arrival_time.total) {
                insert(tree->l, fl);
            } else {
                insert(tree->r, fl);
            }
        }
        if (fl.departure_time.total < tree->key.departure_time.total) {
            insert(tree->l, fl);
        } else {
            insert(tree->r, fl);
        }
    }

    void order(Node*& tree) {
        if (tree != nullptr) {
            order(tree->r);
            cout << tree->key.departure_time.hour << ':' << tree->key.departure_time.minute <<
                 ':' << tree->key.departure_time.second << endl;
            order(tree->l);
        }
    }
};


int main() {
    int n;    //количество структур Flight
    cin >> n;
    Tree tree;

    for (int i = 0; i < n; ++i) {  //получаем данные и отправляем их в дерево
        Flight flight;
        cout << "Введите пункт отправления\n";
        cin >> flight.point_of_departure;
        cout << "Введите пункт прибытия\n";
        cin >> flight.point_of_arrival;
        cout << "Введите количество вагонов\n";
        cin >> flight.wagons;
        cout << "Введите количество пассажирских мест\n";
        cin >> flight.passengers;
        cout << "Введите время отправления в формате 'hh:mm:ss'\n";
        string time;
        cin >> time;
        flight.departure_time.hour = time.substr(0, 2);
        flight.departure_time.minute = time.substr(3, 2);
        flight.departure_time.second = time.substr(6, 2);
        flight.departure_time.total = stoi(time.substr(0, 2)) * 3600 +
                                      stoi(time.substr(3, 2)) * 60 + stoi(time.substr(6, 2));
        cout << "Введите время прибытия в формате 'hh:mm:ss'\n";
        cin >> time;
        flight.arrival_time.hour = time.substr(0, 2);
        flight.arrival_time.minute = time.substr(3, 2);
        flight.arrival_time.second = time.substr(6, 2);
        flight.arrival_time.total = stoi(time.substr(0, 2)) * 3600 +
                                    stoi(time.substr(3, 2)) * 60 + stoi(time.substr(6, 2));
        cout << endl;
        tree.insert(flight);
    }

    tree.order(tree.root);  //выводим время отправления рейсов в порядке убывания
}
